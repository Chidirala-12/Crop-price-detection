# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1adbUWomZhIXu3YpJTgFFQIvWXpjKa-8J
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("/content/sample_data/dataset.csv")

df.head(10)

df.tail(10)

df.shape

df.columns

df.isnull().sum()

df.duplicated().sum()

df.info()

df.nunique()

df.describe()

columns_of_interest = ['CostCultivation', 'CostCultivation2', 'Production', 'Yield', 'Temperature', 'RainFall Annual', 'Price']

for column in columns_of_interest:
    plt.figure(figsize=(8, 8))
    plt.hist(df[column], bins=30, color='orange', edgecolor='blue')
    plt.title(f'Histogram of {column}', fontsize=16)
    plt.xlabel(column, fontsize=14)
    plt.ylabel('Frequency', fontsize=14)
    plt.grid(True)
    plt.show()

import seaborn as sn

df.columns = df.columns.str.replace('_log','')
#specifying column of interest
columns_of_interest = ['CostCultivation', 'CostCultivation2', 'Production', 'Yield', 'Temperature', 'RainFall Annual', 'Price']
#scatter plot
sn.pairplot(df[columns_of_interest ], kind='scatter', diag_kind='auto')
plt.show()

#from scatter plot cult1 and cult2 same
df['CostCultivation_p']=df['CostCultivation']+df['CostCultivation2']
df = df.drop(columns=['CostCultivation','CostCultivation2'])
print(df.head())

df.describe()

columns_of_interest = ['CostCultivation_p', 'Production', 'Yield', 'Temperature', 'RainFall Annual', 'Price']

for column in columns_of_interest:
    if column not in df.columns:
        print(f"Column '{column}' not found in DataFrame.")
        continue

for column in columns_of_interest:
  if column in df.columns:
    df[column+'_log'] = np.log(df[column] + 1)

for column in columns_of_interest:
  if column + '_log' in df.columns:
    plt.figure(figsize=(8, 6))
    plt.hist(df[column+'_log'], bins=30, color='skyblue', edgecolor='black')
    plt.title(f'Histogram of log({column})', fontsize=16)
    plt.xlabel(f'log({column})', fontsize=14)
    plt.ylabel('Frequency', fontsize=14)
    plt.grid(True)
    plt.show()

for column in columns_of_interest:
  log_column=column+'_log';
  if column + '_log' in df.columns:
    plt.figure(figsize=(8, 6))
    sn.boxplot(data=df, y=log_column, color="orange", orient='v')
    plt.title(f'Box plot of  log({column})', fontsize=16)
    plt.ylabel(f'log({column})', fontsize=14)
    plt.grid(True)
    plt.show()

df

df=df.drop(columns=columns_of_interest)

df

df = pd.get_dummies(df, columns=['State', 'Crop'])

df

#Linear Regression

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

X = df.drop(columns=['Price_log'])
y = df['Price_log']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_pred)
print("R^2 Score:", r2)

#DecisionTree Regression

from sklearn.tree import DecisionTreeRegressor

dt_model = DecisionTreeRegressor()
dt_model.fit(X_train, y_train)

y_pred_dt = dt_model.predict(X_test)

mse_dt = mean_squared_error(y_test, y_pred_dt)
print("Mean Squared Error:", mse_dt)

r2_dt = r2_score(y_test, y_pred_dt)
print("R^2 Score:", r2_dt)

#SVM

from sklearn.svm import SVR

sv_model = SVR()
sv_model.fit(X_train, y_train)

y_pred_sv = sv_model.predict(X_test)

mse_sv = mean_squared_error(y_test, y_pred_sv)
print("Mean Squared Error:", mse_sv)

sv_r2 = r2_score(y_test, y_pred)
print("R^2 Score:", sv_r2)